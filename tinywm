#!/usr/bin/env ruby
################################################################################
#
#   TinyWM is a simple little Ruby-based window manager based on the "original
#   tinywm" created by Nick Welch (http://incise.org/tinywm.html)
#
################################################################################

require 'rubygems'
require 'colorize'

require_relative 'xlib'

module TinyWM
  # Start the window manager and block until it's dead
  def self.run!
    display = Xlib.open_display(nil)

    if display.null?
      error 'Failed to open an X11 display!'
      return 1
    end

    log "Opened display #{display}"

    root = Xlib.root_window(display)

    log "Acquired root window: #{root}"

    setup_keys_for(display, root)

    begin
      event_loop(display)
    rescue Interrupt
      log 'Exiting'
    rescue StandardError => ex
      error ex.inspect
      error ex.backtrace
    end

    return 0
  end

  def self.event_loop(display_ptr)
    loop do
      event = acquire_event(display_ptr)
      next if event.nil?
      handle_event(Xlib::Events.distinct_event_for(event))
    end
  end

  # Acquire an event if there is one pending
  #
  # @param [FFI::Pointer] display_ptr
  # @return [NilClass] if we have no events
  # @return [Xlib::Event] untyped, generic event struct
  def self.acquire_event(display_ptr)
    # Grab the pending events so we don't have to block the Ruby VM on
    # C-level blockers in Xlib#next
    pending = Xlib.pending(display_ptr)

    if pending == 0
      # Avoid CPU-busylooping
      sleep 0.2
      return nil
    end

    event = Xlib::Event.new
    success  = !!(Xlib.next(display_ptr, event.to_ptr))
    return event if success
  end

  def self.handle_event(event)
    if event.is_a? Xlib::Events::KeyPress
      if event[:subwindow] != 0
        log 'raising window'
        Xlib.raise_window(event[:display], event[:window])
      end
    end

    if event.is_a? Xlib::Events::ButtonPress
      log 'button pressed!'
      Xlib.grab_pointer(event[:display],
                        event[:subwindow],
                        1,
                        (Xlib::Masks::POINTER_MOTION | Xlib::Masks::BUTTON_RELEASE),
                        Xlib::Mode::GRAB_MODE_ASYNC,
                        Xlib::Mode::GRAB_MODE_ASYNC,
                        0,
                        0,
                        0)

      # Need to hold onto this for the move
      @start_event = event
      @attrs = Xlib::WindowAttributes.new
      Xlib.window_attributes(event[:display],
                             event[:subwindow],
                             @attrs)
    end

    if event.is_a? Xlib::Events::ButtonRelease
      log 'button released'
      @start_event = nil
      @attrs = nil
      Xlib.ungrab_pointer(event[:display], 0)
    end

    if event.is_a? Xlib::Events::MotionNotify
      return if (@start_event.nil? || @attrs.nil?)

      x_diff = event[:x_root] - @start_event[:x_root]
      y_diff = event[:y_root] - @start_event[:y_root]
      x = @attrs[:x]
      y = @attrs[:y]
      width = @attrs[:width]
      height = @attrs[:height]

      if @start_event[:button] == 1 # left mouse
        x = (x + x_diff)
        y = (y + y_diff)
      elsif @start_event[:button] == 3 # right mouse
        width = [1, width + x_diff].max
        height = [1, height + y_diff].max
      else
        # lolwut
      end

      Xlib.move_or_resize_window(event[:display],
                                 event[:window],
                                 x,
                                 y,
                                 width,
                                 height)
    end
  end

  def self.setup_keys_for(display_ptr, root_window)
    rc = !!(Xlib.grab_key(display_ptr,
                          Xlib::Keys.symbol_to_code(display_ptr,
                                       Xlib::Keys.string_to_symbol('F1')),
                          Xlib::Keys::MOD_4,
                          root_window,
                          1, # yes to owner events
                          Xlib::Mode::GRAB_MODE_ASYNC,
                          Xlib::Mode::GRAB_MODE_ASYNC))
    log "Setting up Mod4+F1 for window raising => #{rc}"

    rc = !!(Xlib.grab_button(display_ptr,
                             1, # left-mouse
                             Xlib::Keys::MOD_4,
                             root_window,
                             1, # yes to owner events,
                             Xlib::Masks::BUTTON_PRESS,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                            0,
                            0))
    log "Setting Mod4+LeftMouseClick for moving => #{rc}"

    rc = !!(Xlib.grab_button(display_ptr,
                             3, # right mouse
                             Xlib::Keys::MOD_4,
                             root_window,
                             1, # yes to owner events,
                             Xlib::Masks::BUTTON_PRESS,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                            0,
                            0))
    log "Setting Mod4+RightMouseClick for resize => #{rc}"
  end

  def self.log(message)
    if message.is_a? Array
      message.each { |m| log(m) }
    else
      puts "[#{Time.now.utc}]>> #{message}"
    end
  end

  def self.error(message)
    if message.is_a? Array
      message.each { |m| error(m) }
    else
      puts "[#{Time.now.utc}]** #{message}".red
    end
  end
end


if $0 == __FILE__
  TinyWM.log "Starting TinyWM (#{RUBY_VERSION}:#{RUBY_PLATFORM})"
  exit TinyWM.run!
end
