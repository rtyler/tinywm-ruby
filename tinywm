#!/usr/bin/env ruby
################################################################################
#
#   TinyWM is a simple little Ruby-based window manager based on the "original
#   tinywm" created by Nick Welch (http://incise.org/tinywm.html)
#
################################################################################

require 'rubygems'
require 'colorize'

require_relative 'xlib'

module TinyWM
  # Start the window manager and block until it's dead
  def self.run!
    display = Xlib.open_display(nil)

    if display.null?
      error 'Failed to open an X11 display!'
      return 1
    end

    log "Opened display #{display}"

    root = Xlib.root_window(display)

    log "Acquired root window: #{root}"

    setup_keys_for(display, root)

    begin
      event_loop(display)
    rescue Interrupt
      log 'Exiting'
    rescue StandardError => ex
      error ex.inspect
      error ex.backtrace
    end

    return 0
  end

  def self.event_loop(display_ptr)
    loop do
      # Grab the pending events so we don't have to block the Ruby VM on
      # C-level blockers in Xlib#next
      pending = Xlib.pending(display_ptr)

      if pending == 0
        # Avoid CPU-busylooping
        sleep 0.2
      end

      # Loop over all the pending events
      until pending == 0
        pending = pending - 1
        event = Xlib::Event.new
        success  = Xlib.next(display_ptr, event.to_ptr)
        log "event captured => #{success}"
        log "event => #{event.inspect}"
      end
    end
  end

  def self.setup_keys_for(display_ptr, root_window)
    rc = !!(Xlib.grab_key(display_ptr,
                          Xlib::Keys.symbol_to_code(display_ptr,
                                       Xlib::Keys.string_to_symbol('F1')),
                          Xlib::Keys::MOD_4,
                          root_window,
                          1, # yes to owner events
                          Xlib::Mode::GRAB_MODE_ASYNC,
                          Xlib::Mode::GRAB_MODE_ASYNC))
    log "Setting up Mod4+F1 => #{rc}"

    rc = !!(Xlib.grab_button(display_ptr,
                             1, # left-mouse
                             Xlib::Keys::MOD_4,
                             root_window,
                             1, # yes to owner events,
                             Xlib::Masks::BUTTON_PRESS,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                            0,
                            0))
    log "Setting Mod4+LeftMouseClick for moving => #{rc}"

    rc = !!(Xlib.grab_button(display_ptr,
                             3, # right mouse
                             Xlib::Keys::MOD_4,
                             root_window,
                             1, # yes to owner events,
                             Xlib::Masks::BUTTON_PRESS,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                             Xlib::Mode::GRAB_MODE_ASYNC,
                            0,
                            0))
    log "Setting Mod4+RightMouseClick for resize => #{rc}"
  end

  def self.log(message)
    if message.is_a? Array
      message.each { |m| log(m) }
    else
      puts "[#{Time.now.utc}]>> #{message}"
    end
  end

  def self.error(message)
    if message.is_a? Array
      message.each { |m| error(m) }
    else
      puts "[#{Time.now.utc}]** #{message}".red
    end
  end
end


if $0 == __FILE__
  TinyWM.log 'Starting TinyWM'
  exit TinyWM.run!
end
